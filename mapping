import geopandas as gpd
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.colors import ListedColormap, BoundaryNorm
from datetime import datetime

# Load data
material_data = pd.read_csv("Material_sub_country_emissions.csv")
shapefile = gpd.read_file("gadm410_level1_RE.shp").to_crs(epsg=3035)  # Reproject to Europe-centric CRS

# Select relevant data
material_data = material_data[material_data["material_type"] == "Total"]
material_data = material_data.rename(columns={"group_identifier": "scenario"})

# Filter for different scenarios
scenarios = ["historical", "rcp4p5_2080", "rcp8p5_2080"]
scenario_data = {
    scenario: material_data[
        (material_data["flood_type"] == "combined") &
        (material_data["threat"] == "EAD_current_dike") &
        (material_data["scenario"] == scenario)
    ].assign(tonne=lambda df: df["tonne"] * 1e-6)
    for scenario in scenarios
}

# Merge with shapefile
maps = {
    scenario: gpd.GeoDataFrame(
        shapefile.merge(data, on=["COUNTRY", "NAME_1"], how="left")
    )
    for scenario, data in scenario_data.items()
}

# Define colormap
bins = [0, 0.1, 0.3, 0.8, 2.0, 8.0, 130]
colors = ["#e3f2fd", "#90caf9", "#7986cb", "#5e35b1", "#e57373", "#c2185b"]
cmap = ListedColormap(colors)
norm = BoundaryNorm(bins, len(colors), clip=True)

# Plotting
fig, axes = plt.subplots(1, 3, figsize=(20, 10), sharex=True, sharey=True)
titles = ["Historical", "RCP 4.5-2080", "RCP 8.5-2080"]

for ax, (scenario, data) in zip(axes, maps.items()):
    data.plot(column="tonne", cmap=cmap, norm=norm, linewidth=0.2, edgecolor="grey", ax=ax)
    data.dissolve(by="COUNTRY").plot(edgecolor="black", facecolor="none", linewidth=0.3, ax=ax)
    ax.set_title(titles.pop(0), fontsize=18, weight="bold")
    ax.axis("off")

# Add colorbar
cax = fig.add_axes([0.3, 0.1, 0.5, 0.02])
sm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)
fig.colorbar(sm, cax=cax, orientation="horizontal", label="Expected Annual Damage (Mt)")

# Save figure
plt.tight_layout()
current_date = datetime.now().strftime('%Y-%m-%d')
plt.savefig(f"EAD_current_dike_scenarios_{current_date}.png", dpi=200, bbox_inches="tight", transparent=True)
